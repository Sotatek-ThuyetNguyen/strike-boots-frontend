/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FarmingPoolInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SUPER_ADMIN()": FunctionFragment;
    "__StableFarmingPool_init()": FunctionFragment;
    "farmingAddBlackList(address[])": FunctionFragment;
    "farmingAddWhiteList(uint256,address[])": FunctionFragment;
    "farmingBlackList(address)": FunctionFragment;
    "farmingRemoveBlackList(address[])": FunctionFragment;
    "farmingRemoveWhiteList(uint256,address[])": FunctionFragment;
    "farmingWhiteList(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stableFarmingAddPool(uint256,address,address,uint256,uint256,uint64,uint256,uint256,uint256,uint256)": FunctionFragment;
    "stableFarmingAllowEmergencyWithdraw()": FunctionFragment;
    "stableFarmingBalanceOf(uint256,address)": FunctionFragment;
    "stableFarmingClaimPendingWithdraw(uint256)": FunctionFragment;
    "stableFarmingClaimReward(uint256)": FunctionFragment;
    "stableFarmingDeposit(uint256,uint256)": FunctionFragment;
    "stableFarmingEmergencyWithdraw(uint256)": FunctionFragment;
    "stableFarmingPendingReward(uint256,address)": FunctionFragment;
    "stableFarmingPendingWithdrawals(uint256,address)": FunctionFragment;
    "stableFarmingPoolInfo(uint256)": FunctionFragment;
    "stableFarmingPoolLength()": FunctionFragment;
    "stableFarmingRewardDistributor()": FunctionFragment;
    "stableFarmingSetAllowEmergencyWithdraw(bool)": FunctionFragment;
    "stableFarmingSetRewardDistributor(address)": FunctionFragment;
    "stableFarmingStakingData(uint256,address)": FunctionFragment;
    "stableFarmingTotalStaked(uint256)": FunctionFragment;
    "stableFarmingUpdatePool(uint256,address,address,uint256,uint64,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "stableFarmingWithdraw(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__StableFarmingPool_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmingAddBlackList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingAddWhiteList",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingRemoveBlackList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingRemoveWhiteList",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingWhiteList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingAddPool",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingAllowEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingBalanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingClaimPendingWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingClaimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingEmergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingPendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingPendingWithdrawals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingSetAllowEmergencyWithdraw",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingSetRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingStakingData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingUpdatePool",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFarmingWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__StableFarmingPool_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingAddBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingAddWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingRemoveBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingRemoveWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingAddPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingAllowEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingClaimPendingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingClaimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingPendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingSetAllowEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingSetRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingUpdatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFarmingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddBlackList(address[])": EventFragment;
    "AddWhiteList(uint256,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveBlackList(address[])": EventFragment;
    "RemoveWhiteList(uint256,address[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StableFarmingDeposit(uint256,address,uint256,uint256)": EventFragment;
    "StableFarmingEmergencyWithdraw(uint256,address,uint256)": EventFragment;
    "StableFarmingPendingWithdraw(uint256,address,uint256,uint256)": EventFragment;
    "StableFarmingPoolCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StableFarmingPoolUpdated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StableFarmingRewardsHarvested(uint256,address,uint256,uint256)": EventFragment;
    "StableFarmingWithdraw(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFarmingDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFarmingEmergencyWithdraw"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFarmingPendingWithdraw"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFarmingPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFarmingPoolUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFarmingRewardsHarvested"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFarmingWithdraw"): EventFragment;
}

export type AddBlackListEvent = TypedEvent<[string[]], { addresses: string[] }>;

export type AddBlackListEventFilter = TypedEventFilter<AddBlackListEvent>;

export type AddWhiteListEvent = TypedEvent<
  [BigNumber, string[]],
  { poolId: BigNumber; addresses: string[] }
>;

export type AddWhiteListEventFilter = TypedEventFilter<AddWhiteListEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveBlackListEvent = TypedEvent<
  [string[]],
  { addresses: string[] }
>;

export type RemoveBlackListEventFilter = TypedEventFilter<RemoveBlackListEvent>;

export type RemoveWhiteListEvent = TypedEvent<
  [BigNumber, string[]],
  { poolId: BigNumber; addresses: string[] }
>;

export type RemoveWhiteListEventFilter = TypedEventFilter<RemoveWhiteListEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type StableFarmingDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    stakeTime: BigNumber;
  }
>;

export type StableFarmingDepositEventFilter =
  TypedEventFilter<StableFarmingDepositEvent>;

export type StableFarmingEmergencyWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { poolId: BigNumber; account: string; amount: BigNumber }
>;

export type StableFarmingEmergencyWithdrawEventFilter =
  TypedEventFilter<StableFarmingEmergencyWithdrawEvent>;

export type StableFarmingPendingWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    withdrawTime: BigNumber;
  }
>;

export type StableFarmingPendingWithdrawEventFilter =
  TypedEventFilter<StableFarmingPendingWithdrawEvent>;

export type StableFarmingPoolCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    poolId: BigNumber;
    stableFarmingAcceptedToken: string;
    stableFarmingRewardToken: string;
    cap: BigNumber;
    APR: BigNumber;
    startJoinTime: BigNumber;
    endJoinTime: BigNumber;
    minInvestment: BigNumber;
    maxInvestment: BigNumber;
    lockDuration: BigNumber;
    delayDuration: BigNumber;
  }
>;

export type StableFarmingPoolCreatedEventFilter =
  TypedEventFilter<StableFarmingPoolCreatedEvent>;

export type StableFarmingPoolUpdatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    poolId: BigNumber;
    stableFarmingAcceptedToken: string;
    stableFarmingRewardToken: string;
    cap: BigNumber;
    APR: BigNumber;
    startJoinTime: BigNumber;
    endJoinTime: BigNumber;
    minInvestment: BigNumber;
    maxInvestment: BigNumber;
    lockDuration: BigNumber;
    delayDuration: BigNumber;
  }
>;

export type StableFarmingPoolUpdatedEventFilter =
  TypedEventFilter<StableFarmingPoolUpdatedEvent>;

export type StableFarmingRewardsHarvestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    reward: BigNumber;
    rewardsHarvestTime: BigNumber;
  }
>;

export type StableFarmingRewardsHarvestedEventFilter =
  TypedEventFilter<StableFarmingRewardsHarvestedEvent>;

export type StableFarmingWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    unStakeTime: BigNumber;
  }
>;

export type StableFarmingWithdrawEventFilter =
  TypedEventFilter<StableFarmingWithdrawEvent>;

export interface FarmingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    __StableFarmingPool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    farmingRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { whiteListCount: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingAddPool(
      _cap: BigNumberish,
      _stableFarmingAcceptedToken: string,
      _stableFarmingRewardToken: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      _delayDuration: BigNumberish,
      _startJoinTime: BigNumberish,
      _endJoinTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFarmingBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableFarmingClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingClaimReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingEmergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    stableFarmingPendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
    >;

    stableFarmingPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        cap: BigNumber;
        totalStaked: BigNumber;
        stableFarmingAcceptedToken: string;
        stableFarmingRewardToken: string;
        minInvestment: BigNumber;
        maxInvestment: BigNumber;
        APR: BigNumber;
        lockDuration: BigNumber;
        delayDuration: BigNumber;
        startJoinTime: BigNumber;
        endJoinTime: BigNumber;
      }
    >;

    stableFarmingPoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableFarmingRewardDistributor(
      overrides?: CallOverrides
    ): Promise<[string]>;

    stableFarmingSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingSetRewardDistributor(
      _stableFarmingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
        reward: BigNumber;
      }
    >;

    stableFarmingTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableFarmingUpdatePool(
      _poolId: BigNumberish,
      stableFarmingAcceptedToken: string,
      stableFarmingRewardToken: string,
      cap: BigNumberish,
      APR: BigNumberish,
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFarmingWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SUPER_ADMIN(overrides?: CallOverrides): Promise<string>;

  __StableFarmingPool_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingAddBlackList(
    _blackList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingAddWhiteList(
    _poolId: BigNumberish,
    _whitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingBlackList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  farmingRemoveBlackList(
    _blackList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingRemoveWhiteList(
    _poolId: BigNumberish,
    _whitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingWhiteList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingAddPool(
    _cap: BigNumberish,
    _stableFarmingAcceptedToken: string,
    _stableFarmingRewardToken: string,
    _minInvestment: BigNumberish,
    _maxInvestment: BigNumberish,
    _APR: BigNumberish,
    _lockDuration: BigNumberish,
    _delayDuration: BigNumberish,
    _startJoinTime: BigNumberish,
    _endJoinTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingAllowEmergencyWithdraw(
    overrides?: CallOverrides
  ): Promise<boolean>;

  stableFarmingBalanceOf(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFarmingClaimPendingWithdraw(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingClaimReward(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingDeposit(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingEmergencyWithdraw(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingPendingReward(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFarmingPendingWithdrawals(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
  >;

  stableFarmingPoolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      cap: BigNumber;
      totalStaked: BigNumber;
      stableFarmingAcceptedToken: string;
      stableFarmingRewardToken: string;
      minInvestment: BigNumber;
      maxInvestment: BigNumber;
      APR: BigNumber;
      lockDuration: BigNumber;
      delayDuration: BigNumber;
      startJoinTime: BigNumber;
      endJoinTime: BigNumber;
    }
  >;

  stableFarmingPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  stableFarmingRewardDistributor(overrides?: CallOverrides): Promise<string>;

  stableFarmingSetAllowEmergencyWithdraw(
    _shouldAllow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingSetRewardDistributor(
    _stableFarmingRewardDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingStakingData(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      joinTime: BigNumber;
      updatedTime: BigNumber;
      reward: BigNumber;
    }
  >;

  stableFarmingTotalStaked(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFarmingUpdatePool(
    _poolId: BigNumberish,
    stableFarmingAcceptedToken: string,
    stableFarmingRewardToken: string,
    cap: BigNumberish,
    APR: BigNumberish,
    startJoinTime: BigNumberish,
    endJoinTime: BigNumberish,
    minInvestment: BigNumberish,
    maxInvestment: BigNumberish,
    lockDuration: BigNumberish,
    delayDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFarmingWithdraw(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<string>;

    __StableFarmingPool_init(overrides?: CallOverrides): Promise<void>;

    farmingAddBlackList(
      _blackList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    farmingAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    farmingBlackList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    farmingRemoveBlackList(
      _blackList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    farmingRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    farmingWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingAddPool(
      _cap: BigNumberish,
      _stableFarmingAcceptedToken: string,
      _stableFarmingRewardToken: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      _delayDuration: BigNumberish,
      _startJoinTime: BigNumberish,
      _endJoinTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFarmingBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingClaimReward(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingEmergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingPendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
    >;

    stableFarmingPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        cap: BigNumber;
        totalStaked: BigNumber;
        stableFarmingAcceptedToken: string;
        stableFarmingRewardToken: string;
        minInvestment: BigNumber;
        maxInvestment: BigNumber;
        APR: BigNumber;
        lockDuration: BigNumber;
        delayDuration: BigNumber;
        startJoinTime: BigNumber;
        endJoinTime: BigNumber;
      }
    >;

    stableFarmingPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stableFarmingRewardDistributor(overrides?: CallOverrides): Promise<string>;

    stableFarmingSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingSetRewardDistributor(
      _stableFarmingRewardDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
        reward: BigNumber;
      }
    >;

    stableFarmingTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingUpdatePool(
      _poolId: BigNumberish,
      stableFarmingAcceptedToken: string,
      stableFarmingRewardToken: string,
      cap: BigNumberish,
      APR: BigNumberish,
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFarmingWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddBlackList(address[])"(addresses?: null): AddBlackListEventFilter;
    AddBlackList(addresses?: null): AddBlackListEventFilter;

    "AddWhiteList(uint256,address[])"(
      poolId?: null,
      addresses?: null
    ): AddWhiteListEventFilter;
    AddWhiteList(poolId?: null, addresses?: null): AddWhiteListEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveBlackList(address[])"(addresses?: null): RemoveBlackListEventFilter;
    RemoveBlackList(addresses?: null): RemoveBlackListEventFilter;

    "RemoveWhiteList(uint256,address[])"(
      poolId?: null,
      addresses?: null
    ): RemoveWhiteListEventFilter;
    RemoveWhiteList(
      poolId?: null,
      addresses?: null
    ): RemoveWhiteListEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StableFarmingDeposit(uint256,address,uint256,uint256)"(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      stakeTime?: null
    ): StableFarmingDepositEventFilter;
    StableFarmingDeposit(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      stakeTime?: null
    ): StableFarmingDepositEventFilter;

    "StableFarmingEmergencyWithdraw(uint256,address,uint256)"(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): StableFarmingEmergencyWithdrawEventFilter;
    StableFarmingEmergencyWithdraw(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): StableFarmingEmergencyWithdrawEventFilter;

    "StableFarmingPendingWithdraw(uint256,address,uint256,uint256)"(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      withdrawTime?: null
    ): StableFarmingPendingWithdrawEventFilter;
    StableFarmingPendingWithdraw(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      withdrawTime?: null
    ): StableFarmingPendingWithdrawEventFilter;

    "StableFarmingPoolCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      stableFarmingAcceptedToken?: null,
      stableFarmingRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null
    ): StableFarmingPoolCreatedEventFilter;
    StableFarmingPoolCreated(
      poolId?: BigNumberish | null,
      stableFarmingAcceptedToken?: null,
      stableFarmingRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null
    ): StableFarmingPoolCreatedEventFilter;

    "StableFarmingPoolUpdated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      stableFarmingAcceptedToken?: null,
      stableFarmingRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null
    ): StableFarmingPoolUpdatedEventFilter;
    StableFarmingPoolUpdated(
      poolId?: BigNumberish | null,
      stableFarmingAcceptedToken?: null,
      stableFarmingRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null
    ): StableFarmingPoolUpdatedEventFilter;

    "StableFarmingRewardsHarvested(uint256,address,uint256,uint256)"(
      poolId?: BigNumberish | null,
      account?: string | null,
      reward?: null,
      rewardsHarvestTime?: null
    ): StableFarmingRewardsHarvestedEventFilter;
    StableFarmingRewardsHarvested(
      poolId?: BigNumberish | null,
      account?: string | null,
      reward?: null,
      rewardsHarvestTime?: null
    ): StableFarmingRewardsHarvestedEventFilter;

    "StableFarmingWithdraw(uint256,address,uint256,uint256)"(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      unStakeTime?: null
    ): StableFarmingWithdrawEventFilter;
    StableFarmingWithdraw(
      poolId?: BigNumberish | null,
      account?: string | null,
      amount?: null,
      unStakeTime?: null
    ): StableFarmingWithdrawEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    __StableFarmingPool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmingRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingAddPool(
      _cap: BigNumberish,
      _stableFarmingAcceptedToken: string,
      _stableFarmingRewardToken: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      _delayDuration: BigNumberish,
      _startJoinTime: BigNumberish,
      _endJoinTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingClaimReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingEmergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingPendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stableFarmingRewardDistributor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingSetRewardDistributor(
      _stableFarmingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFarmingUpdatePool(
      _poolId: BigNumberish,
      stableFarmingAcceptedToken: string,
      stableFarmingRewardToken: string,
      cap: BigNumberish,
      APR: BigNumberish,
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFarmingWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __StableFarmingPool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmingRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingAddPool(
      _cap: BigNumberish,
      _stableFarmingAcceptedToken: string,
      _stableFarmingRewardToken: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      _delayDuration: BigNumberish,
      _startJoinTime: BigNumberish,
      _endJoinTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingClaimReward(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingEmergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingPendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingPoolLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingSetRewardDistributor(
      _stableFarmingRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFarmingUpdatePool(
      _poolId: BigNumberish,
      stableFarmingAcceptedToken: string,
      stableFarmingRewardToken: string,
      cap: BigNumberish,
      APR: BigNumberish,
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFarmingWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
