/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StableFinancePoolInfoStruct = {
  stableFinanceAcceptedToken: string;
  stableFinanceRewardToken: string[];
  cap: BigNumberish;
  totalStaked: BigNumberish;
  startJoinTime: BigNumberish;
  endJoinTime: BigNumberish;
  minInvestment: BigNumberish;
  maxInvestment: BigNumberish;
  APR: BigNumberish[];
  lockDuration: BigNumberish;
  delayDuration: BigNumberish;
  option: BigNumberish;
};

export type StableFinancePoolInfoStructOutput = [
  string,
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber,
  BigNumber,
  number
] & {
  stableFinanceAcceptedToken: string;
  stableFinanceRewardToken: string[];
  cap: BigNumber;
  totalStaked: BigNumber;
  startJoinTime: BigNumber;
  endJoinTime: BigNumber;
  minInvestment: BigNumber;
  maxInvestment: BigNumber;
  APR: BigNumber[];
  lockDuration: BigNumber;
  delayDuration: BigNumber;
  option: number;
};

export type StableFinancePendingWithdrawalStruct = {
  amount: BigNumberish;
  applicableAt: BigNumberish;
};

export type StableFinancePendingWithdrawalStructOutput = [
  BigNumber,
  BigNumber
] & { amount: BigNumber; applicableAt: BigNumber };

export interface StakingPoolInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SUPER_ADMIN()": FunctionFragment;
    "__StableFinancePool_init()": FunctionFragment;
    "_verifySignature(bytes32,bytes)": FunctionFragment;
    "coldWalletAddress()": FunctionFragment;
    "getClaimRewardMessageHash(uint256,uint256[],address,uint256)": FunctionFragment;
    "getEthSignedMessageHash(bytes32)": FunctionFragment;
    "getMessageHash(uint256,uint256,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSignerAddress(bytes32,bytes)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "nonce(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setColdWalletAddress(address)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "signer()": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "stableFinanceAddBlackList(address[])": FunctionFragment;
    "stableFinanceAddPool((address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256,uint8))": FunctionFragment;
    "stableFinanceAddWhiteList(uint256,address[])": FunctionFragment;
    "stableFinanceAllowEmergencyWithdraw()": FunctionFragment;
    "stableFinanceBalanceOf(uint256,address)": FunctionFragment;
    "stableFinanceBlackList(address)": FunctionFragment;
    "stableFinanceClaimPendingWithdraw(uint256)": FunctionFragment;
    "stableFinanceClaimReward(uint256,uint256[],bytes)": FunctionFragment;
    "stableFinanceClaimedRewardOf(uint256,address)": FunctionFragment;
    "stableFinanceDeposit(uint256,uint256)": FunctionFragment;
    "stableFinanceNonceOf(uint256,address)": FunctionFragment;
    "stableFinancePendingRewards(uint256,address)": FunctionFragment;
    "stableFinancePendingWithdrawals(uint256,address)": FunctionFragment;
    "stableFinancePoolInfo(uint256)": FunctionFragment;
    "stableFinancePoolLength()": FunctionFragment;
    "stableFinanceRemoveBlackList(address[])": FunctionFragment;
    "stableFinanceRemoveWhiteList(uint256,address[])": FunctionFragment;
    "stableFinanceRewardDistributor()": FunctionFragment;
    "stableFinanceSetAllowEmergencyWithdraw(bool)": FunctionFragment;
    "stableFinanceSetRewardDistributor(address)": FunctionFragment;
    "stableFinanceSetSuperAdmin(address)": FunctionFragment;
    "stableFinanceStakingData(uint256,address)": FunctionFragment;
    "stableFinanceTotalStaked(uint256)": FunctionFragment;
    "stableFinanceUpdatePool(uint256,address,address[],uint256,uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "stableFinanceUserPendingWithdrawalsData(uint256,address)": FunctionFragment;
    "stableFinanceWhiteList(uint256)": FunctionFragment;
    "stableFinanceWithdraw(uint256,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__StableFinancePool_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_verifySignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "coldWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimRewardMessageHash",
    values: [BigNumberish, BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setColdWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceAddBlackList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceAddPool",
    values: [StableFinancePoolInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceAddWhiteList",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceAllowEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceBalanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceClaimPendingWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceClaimReward",
    values: [BigNumberish, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceClaimedRewardOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceNonceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinancePendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinancePendingWithdrawals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinancePoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinancePoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceRemoveBlackList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceRemoveWhiteList",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceSetAllowEmergencyWithdraw",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceSetRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceSetSuperAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceStakingData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceUpdatePool",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceUserPendingWithdrawalsData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceWhiteList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFinanceWithdraw",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__StableFinancePool_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coldWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimRewardMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setColdWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceAddBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceAddPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceAddWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceAllowEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceClaimPendingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceClaimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceClaimedRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceNonceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinancePendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinancePendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinancePoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinancePoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceRemoveBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceRemoveWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceSetAllowEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceSetRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceSetSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceUpdatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceUserPendingWithdrawalsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFinanceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddBlackList(address[])": EventFragment;
    "AddWhiteList(uint256,address[])": EventFragment;
    "ChangeColdWalletAddress(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RemoveBlackList(address[])": EventFragment;
    "RemoveWhiteList(uint256,address[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StableFinanceDeposit(uint256,address,uint256,uint256)": EventFragment;
    "StableFinanceEmergencyWithdraw(uint256,address,uint256)": EventFragment;
    "StableFinancePendingWithdraw(uint256,address,uint256,uint256)": EventFragment;
    "StableFinancePoolCreated(uint256,address,address[],uint256,uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "StableFinancePoolUpdated(uint256,address,address[],uint256,uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "StableFinanceRewardsHarvested(uint256,address,uint256,uint256)": EventFragment;
    "StableFinanceWithdraw(uint256,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeColdWalletAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFinanceDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFinanceEmergencyWithdraw"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFinancePendingWithdraw"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFinancePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFinancePoolUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableFinanceRewardsHarvested"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableFinanceWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AddBlackListEvent = TypedEvent<[string[]], { addresses: string[] }>;

export type AddBlackListEventFilter = TypedEventFilter<AddBlackListEvent>;

export type AddWhiteListEvent = TypedEvent<
  [BigNumber, string[]],
  { poolId: BigNumber; addresses: string[] }
>;

export type AddWhiteListEventFilter = TypedEventFilter<AddWhiteListEvent>;

export type ChangeColdWalletAddressEvent = TypedEvent<
  [string],
  { account: string }
>;

export type ChangeColdWalletAddressEventFilter =
  TypedEventFilter<ChangeColdWalletAddressEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RemoveBlackListEvent = TypedEvent<
  [string[]],
  { addresses: string[] }
>;

export type RemoveBlackListEventFilter = TypedEventFilter<RemoveBlackListEvent>;

export type RemoveWhiteListEvent = TypedEvent<
  [BigNumber, string[]],
  { poolId: BigNumber; addresses: string[] }
>;

export type RemoveWhiteListEventFilter = TypedEventFilter<RemoveWhiteListEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type StableFinanceDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    stakeTime: BigNumber;
  }
>;

export type StableFinanceDepositEventFilter =
  TypedEventFilter<StableFinanceDepositEvent>;

export type StableFinanceEmergencyWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { poolId: BigNumber; account: string; amount: BigNumber }
>;

export type StableFinanceEmergencyWithdrawEventFilter =
  TypedEventFilter<StableFinanceEmergencyWithdrawEvent>;

export type StableFinancePendingWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    withdrawTime: BigNumber;
  }
>;

export type StableFinancePendingWithdrawEventFilter =
  TypedEventFilter<StableFinancePendingWithdrawEvent>;

export type StableFinancePoolCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  {
    poolId: BigNumber;
    stableFinanceAcceptedToken: string;
    stableFinanceRewardToken: string[];
    cap: BigNumber;
    APR: BigNumber[];
    startJoinTime: BigNumber;
    endJoinTime: BigNumber;
    minInvestment: BigNumber;
    maxInvestment: BigNumber;
    lockDuration: BigNumber;
    delayDuration: BigNumber;
    option: number;
  }
>;

export type StableFinancePoolCreatedEventFilter =
  TypedEventFilter<StableFinancePoolCreatedEvent>;

export type StableFinancePoolUpdatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ],
  {
    poolId: BigNumber;
    stableFinanceAcceptedToken: string;
    stableFinanceRewardToken: string[];
    cap: BigNumber;
    APR: BigNumber[];
    startJoinTime: BigNumber;
    endJoinTime: BigNumber;
    minInvestment: BigNumber;
    maxInvestment: BigNumber;
    lockDuration: BigNumber;
    delayDuration: BigNumber;
    option: number;
  }
>;

export type StableFinancePoolUpdatedEventFilter =
  TypedEventFilter<StableFinancePoolUpdatedEvent>;

export type StableFinanceRewardsHarvestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    reward: BigNumber;
    rewardsHarvestTime: BigNumber;
  }
>;

export type StableFinanceRewardsHarvestedEventFilter =
  TypedEventFilter<StableFinanceRewardsHarvestedEvent>;

export type StableFinanceWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    unStakeTime: BigNumber;
  }
>;

export type StableFinanceWithdrawEventFilter =
  TypedEventFilter<StableFinanceWithdrawEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StakingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    __StableFinancePool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _verifySignature(
      _msgHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    coldWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    getClaimRewardMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setColdWalletAddress(
      _coldWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    stableFinanceAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceAddPool(
      _payload: StableFinancePoolInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFinanceBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableFinanceBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFinanceClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceClaimReward(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceClaimedRewardOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stableFinanceDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceNonceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableFinancePendingRewards(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stableFinancePendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
    >;

    stableFinancePoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        stableFinanceAcceptedToken: string;
        cap: BigNumber;
        totalStaked: BigNumber;
        startJoinTime: BigNumber;
        endJoinTime: BigNumber;
        minInvestment: BigNumber;
        maxInvestment: BigNumber;
        lockDuration: BigNumber;
        delayDuration: BigNumber;
        option: number;
      }
    >;

    stableFinancePoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableFinanceRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceRewardDistributor(
      overrides?: CallOverrides
    ): Promise<[string]>;

    stableFinanceSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceSetRewardDistributor(
      _stableFinanceRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceSetSuperAdmin(
      _newSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
      }
    >;

    stableFinanceTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableFinanceUpdatePool(
      _poolId: BigNumberish,
      stableFinanceAcceptedToken: string,
      stableFinanceRewardToken: string[],
      cap: BigNumberish,
      APR: BigNumberish[],
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableFinanceUserPendingWithdrawalsData(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[StableFinancePendingWithdrawalStructOutput]>;

    stableFinanceWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { whiteListCount: BigNumber }>;

    stableFinanceWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SUPER_ADMIN(overrides?: CallOverrides): Promise<string>;

  __StableFinancePool_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _verifySignature(
    _msgHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  coldWalletAddress(overrides?: CallOverrides): Promise<string>;

  getClaimRewardMessageHash(
    _poolId: BigNumberish,
    _amount: BigNumberish[],
    _user: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEthSignedMessageHash(
    _messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessageHash(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    _user: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSignerAddress(
    _messageHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setColdWalletAddress(
    _coldWalletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitSignature(
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  stableFinanceAddBlackList(
    _blackList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceAddPool(
    _payload: StableFinancePoolInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceAddWhiteList(
    _poolId: BigNumberish,
    _whitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceAllowEmergencyWithdraw(
    overrides?: CallOverrides
  ): Promise<boolean>;

  stableFinanceBalanceOf(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFinanceBlackList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stableFinanceClaimPendingWithdraw(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceClaimReward(
    _poolId: BigNumberish,
    _amount: BigNumberish[],
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceClaimedRewardOf(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stableFinanceDeposit(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceNonceOf(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFinancePendingRewards(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stableFinancePendingWithdrawals(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
  >;

  stableFinancePoolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      stableFinanceAcceptedToken: string;
      cap: BigNumber;
      totalStaked: BigNumber;
      startJoinTime: BigNumber;
      endJoinTime: BigNumber;
      minInvestment: BigNumber;
      maxInvestment: BigNumber;
      lockDuration: BigNumber;
      delayDuration: BigNumber;
      option: number;
    }
  >;

  stableFinancePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  stableFinanceRemoveBlackList(
    _blackList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceRemoveWhiteList(
    _poolId: BigNumberish,
    _whitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceRewardDistributor(overrides?: CallOverrides): Promise<string>;

  stableFinanceSetAllowEmergencyWithdraw(
    _shouldAllow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceSetRewardDistributor(
    _stableFinanceRewardDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceSetSuperAdmin(
    _newSuperAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceStakingData(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      joinTime: BigNumber;
      updatedTime: BigNumber;
    }
  >;

  stableFinanceTotalStaked(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFinanceUpdatePool(
    _poolId: BigNumberish,
    stableFinanceAcceptedToken: string,
    stableFinanceRewardToken: string[],
    cap: BigNumberish,
    APR: BigNumberish[],
    startJoinTime: BigNumberish,
    endJoinTime: BigNumberish,
    minInvestment: BigNumberish,
    maxInvestment: BigNumberish,
    lockDuration: BigNumberish,
    delayDuration: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableFinanceUserPendingWithdrawalsData(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<StableFinancePendingWithdrawalStructOutput>;

  stableFinanceWhiteList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableFinanceWithdraw(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<string>;

    __StableFinancePool_init(overrides?: CallOverrides): Promise<void>;

    _verifySignature(
      _msgHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    coldWalletAddress(overrides?: CallOverrides): Promise<string>;

    getClaimRewardMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setColdWalletAddress(
      _coldWalletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    stableFinanceAddBlackList(
      _blackList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceAddPool(
      _payload: StableFinancePoolInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFinanceBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFinanceClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceClaimReward(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceClaimedRewardOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stableFinanceDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceNonceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinancePendingRewards(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stableFinancePendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; applicableAt: BigNumber }
    >;

    stableFinancePoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        stableFinanceAcceptedToken: string;
        cap: BigNumber;
        totalStaked: BigNumber;
        startJoinTime: BigNumber;
        endJoinTime: BigNumber;
        minInvestment: BigNumber;
        maxInvestment: BigNumber;
        lockDuration: BigNumber;
        delayDuration: BigNumber;
        option: number;
      }
    >;

    stableFinancePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stableFinanceRemoveBlackList(
      _blackList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceRewardDistributor(overrides?: CallOverrides): Promise<string>;

    stableFinanceSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceSetRewardDistributor(
      _stableFinanceRewardDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceSetSuperAdmin(
      _newSuperAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
      }
    >;

    stableFinanceTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceUpdatePool(
      _poolId: BigNumberish,
      stableFinanceAcceptedToken: string,
      stableFinanceRewardToken: string[],
      cap: BigNumberish,
      APR: BigNumberish[],
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFinanceUserPendingWithdrawalsData(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<StableFinancePendingWithdrawalStructOutput>;

    stableFinanceWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddBlackList(address[])"(addresses?: null): AddBlackListEventFilter;
    AddBlackList(addresses?: null): AddBlackListEventFilter;

    "AddWhiteList(uint256,address[])"(
      poolId?: null,
      addresses?: null
    ): AddWhiteListEventFilter;
    AddWhiteList(poolId?: null, addresses?: null): AddWhiteListEventFilter;

    "ChangeColdWalletAddress(address)"(
      account?: null
    ): ChangeColdWalletAddressEventFilter;
    ChangeColdWalletAddress(account?: null): ChangeColdWalletAddressEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RemoveBlackList(address[])"(addresses?: null): RemoveBlackListEventFilter;
    RemoveBlackList(addresses?: null): RemoveBlackListEventFilter;

    "RemoveWhiteList(uint256,address[])"(
      poolId?: null,
      addresses?: null
    ): RemoveWhiteListEventFilter;
    RemoveWhiteList(
      poolId?: null,
      addresses?: null
    ): RemoveWhiteListEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StableFinanceDeposit(uint256,address,uint256,uint256)"(
      poolId?: null,
      account?: null,
      amount?: null,
      stakeTime?: null
    ): StableFinanceDepositEventFilter;
    StableFinanceDeposit(
      poolId?: null,
      account?: null,
      amount?: null,
      stakeTime?: null
    ): StableFinanceDepositEventFilter;

    "StableFinanceEmergencyWithdraw(uint256,address,uint256)"(
      poolId?: null,
      account?: null,
      amount?: null
    ): StableFinanceEmergencyWithdrawEventFilter;
    StableFinanceEmergencyWithdraw(
      poolId?: null,
      account?: null,
      amount?: null
    ): StableFinanceEmergencyWithdrawEventFilter;

    "StableFinancePendingWithdraw(uint256,address,uint256,uint256)"(
      poolId?: null,
      account?: null,
      amount?: null,
      withdrawTime?: null
    ): StableFinancePendingWithdrawEventFilter;
    StableFinancePendingWithdraw(
      poolId?: null,
      account?: null,
      amount?: null,
      withdrawTime?: null
    ): StableFinancePendingWithdrawEventFilter;

    "StableFinancePoolCreated(uint256,address,address[],uint256,uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint8)"(
      poolId?: BigNumberish | null,
      stableFinanceAcceptedToken?: null,
      stableFinanceRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null,
      option?: null
    ): StableFinancePoolCreatedEventFilter;
    StableFinancePoolCreated(
      poolId?: BigNumberish | null,
      stableFinanceAcceptedToken?: null,
      stableFinanceRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null,
      option?: null
    ): StableFinancePoolCreatedEventFilter;

    "StableFinancePoolUpdated(uint256,address,address[],uint256,uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint8)"(
      poolId?: BigNumberish | null,
      stableFinanceAcceptedToken?: null,
      stableFinanceRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null,
      option?: null
    ): StableFinancePoolUpdatedEventFilter;
    StableFinancePoolUpdated(
      poolId?: BigNumberish | null,
      stableFinanceAcceptedToken?: null,
      stableFinanceRewardToken?: null,
      cap?: null,
      APR?: null,
      startJoinTime?: null,
      endJoinTime?: null,
      minInvestment?: null,
      maxInvestment?: null,
      lockDuration?: null,
      delayDuration?: null,
      option?: null
    ): StableFinancePoolUpdatedEventFilter;

    "StableFinanceRewardsHarvested(uint256,address,uint256,uint256)"(
      poolId?: null,
      account?: null,
      reward?: null,
      rewardsHarvestTime?: null
    ): StableFinanceRewardsHarvestedEventFilter;
    StableFinanceRewardsHarvested(
      poolId?: null,
      account?: null,
      reward?: null,
      rewardsHarvestTime?: null
    ): StableFinanceRewardsHarvestedEventFilter;

    "StableFinanceWithdraw(uint256,address,uint256,uint256)"(
      poolId?: null,
      account?: null,
      amount?: null,
      unStakeTime?: null
    ): StableFinanceWithdrawEventFilter;
    StableFinanceWithdraw(
      poolId?: null,
      account?: null,
      amount?: null,
      unStakeTime?: null
    ): StableFinanceWithdrawEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    __StableFinancePool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _verifySignature(
      _msgHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coldWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimRewardMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setColdWalletAddress(
      _coldWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceAddPool(
      _payload: StableFinancePoolInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceClaimReward(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceClaimedRewardOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceNonceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinancePendingRewards(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinancePendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinancePoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinancePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stableFinanceRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceRewardDistributor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceSetRewardDistributor(
      _stableFinanceRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceSetSuperAdmin(
      _newSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceUpdatePool(
      _poolId: BigNumberish,
      stableFinanceAcceptedToken: string,
      stableFinanceRewardToken: string[],
      cap: BigNumberish,
      APR: BigNumberish[],
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableFinanceUserPendingWithdrawalsData(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFinanceWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __StableFinancePool_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _verifySignature(
      _msgHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coldWalletAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimRewardMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setColdWalletAddress(
      _coldWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceAddBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceAddPool(
      _payload: StableFinancePoolInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceAddWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceAllowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceBlackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceClaimPendingWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceClaimReward(
      _poolId: BigNumberish,
      _amount: BigNumberish[],
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceClaimedRewardOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceDeposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceNonceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinancePendingRewards(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinancePendingWithdrawals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinancePoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinancePoolLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceRemoveBlackList(
      _blackList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceRemoveWhiteList(
      _poolId: BigNumberish,
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceSetAllowEmergencyWithdraw(
      _shouldAllow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceSetRewardDistributor(
      _stableFinanceRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceSetSuperAdmin(
      _newSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceUpdatePool(
      _poolId: BigNumberish,
      stableFinanceAcceptedToken: string,
      stableFinanceRewardToken: string[],
      cap: BigNumberish,
      APR: BigNumberish[],
      startJoinTime: BigNumberish,
      endJoinTime: BigNumberish,
      minInvestment: BigNumberish,
      maxInvestment: BigNumberish,
      lockDuration: BigNumberish,
      delayDuration: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableFinanceUserPendingWithdrawalsData(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceWhiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFinanceWithdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
